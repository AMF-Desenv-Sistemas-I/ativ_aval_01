Nome: Michel Matias Schmengler

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ARRAYS
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Feito com formato de arquivo: xxx.html
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	<script>

		/*
		01. Crie uma função que receba um número como parâmetro e retorne true se ele for par ou false
		se ele for ímpar.
		*/

		function ParImpar(numero) { // declaração da função

			var n = prompt("Digite um numero"); // usuário recebe a mensagem para digitar o número
			var total=n/2; // fórmula de divisão entre o número inserido pelo usuário por 2
			if(n/2==0){ // condição que verifica se o resto do número dividido por 2 é igual a 0
    		alert(true); // se sim, retorna um alerta de true no navegador
			}
			if(n/2==1){ // condição que verifica se o resto do número dividido por 2 é igual a 1
    		alert(false); // se sim, retorna um alerta de false no navegador
			}
			alert(total); // retorna o resultado da divisão

		}; // fim do código

	</script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	<script>

		/*
		02. Crie uma função que receba um array de números como parâmetro e retorne a soma dos valores
		deste array.
		*/

		function soma(valorA, valorB) { // função soma que recebe dois valores como parâmetro
			return valorA + valorB; // retorna o valor da soma dos dois valores da chamada da função
		};

		console.log(soma(10, 11)); // imprime o valor da soma dos dois números no navegador

	</script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	<script>

		/*
		03. Crie uma função que receba um array de números como parâmetro e retorne outro array
		contendo apenas os números pares.
		*/

		function retornaNNumerosPares(n) { // declaração da função com parâmetro
    		let numerosPares = []; // array vazio que receberá os devidos números, conforme sequência do código
    		for (let i = 0; numerosPares.length < n; i++) { // laço for que recebe a sequência de números desde a posição 0, incrementa, até chegar à posição final no array
        	if (i % 2 == 0) { // condição que verifica se o resto da divisão por 2 é igual a 0
            	numerosPares.push(i); // adiciona os números com push em sequência no array
        	}
    		}
    	return numerosPares; // retorno da função de números pares
		}

		console.log(retornaNNumerosPares(5)); // imprime o array novo com apenas os números pares

	</script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	<script>

		/*
		04. Crie uma função que receba um array de números como parâmetro e retorne outro array
		contendo apenas os números ímpares.
		*/

		function retornaNNumerosImpares(n) { // declaração da função com parâmetro
    		let numerosImpares = []; // array vazio que receberá os devidos números, conforme sequência do código
    		for (let i = 0; numerosImpares.length < n; i++) { // laço for que recebe a sequência de números desde a posição 0, incrementa, até chegar à posição final no array
        	if (i % 2 !== 0) { // condição que verifica se o resto da divisão por 2 é diferente de 0
            	numerosImpares.push(i); // adiciona os números com push em sequência no array
        	}
    		}
    	return numerosImpares; // retorno da função de números ímpares
		}

		console.log(retornaNNumerosImpares(5)); // imprime o array novo com apenas os números ímpares

	</script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	<script>

		/*
		05. Crie uma função que receba um array de números como parâmetro e retorne outro array
		contendo apenas os números maiores que 10.
		*/

		function retornaNNumeros(n) { // declaração da função com parâmetro
    		let numeros = []; // array vazio que receberá os devidos números, conforme sequência do código
    		for (let i = 0; numeros.length < n; i++) { // laço for que recebe a sequência de números desde a posição 0, incrementa, até chegar à posição final no array
        	if (i >= 10) { // condição que verifica se a sequência de números é maior ou igual a 10
            	numeros.push(i); // adiciona os números com push em sequência no array
        	}
    		}
    	return numeros; // retorno da função de números pares
		}

		console.log(retornaNNumeros(10)); // imprime o array novo com apenas os números pares

	</script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	<script>

		/*
		06. Crie uma função que receba dois arrays como parâmetros e retorne outro array contendo
		a concatenação dos dois primeiros.
		*/

		function concatenaArray(n) { // declaração da função com parâmetro
    		let numeros1 = [12, 15, 3]; // primeiro array de números declarado
			let numeros2 = [292, 412, 995]; // segundo array de números declarado
            let concatenado = numeros1.concat(numeros2); // concatenação dos dois primeiros array em um novo
    		}

		console.log(concatenado); // imprime o novo array com a concatenação do array 1 e 2

	</script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
REST
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	<script>

		/*
		01. Crie uma função que recebe um número indeterminado de parâmetros e retorne a soma desses
		parâmetros.
		*/

		function soma(...numeros) { // declaração da função com número indeterminado de parâmetros
  		let total = 0; // declaração de variável inicial em 0
  		for (let numero of numeros) { // laço for com declaração dos números desde a posição 0
    		total += numero; // incremento
  		}
  		return total; // retorno dos números
		}
		console.log(soma(1, 2, 3)); // imprime a soma dos números da função
		console.log(soma(4, 5, 6, 7)); // imprime a soma dos números da função

	</script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Feito com formato de arquivo: xxx.js
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 02. Crie uma função que recebe um número indeterminado de parâmetros e retorne a média desses parâmetros.

function calcularMedia(...numeros) { // declaração da função que receberá um número indeterminado de parâmetros por operador "spread"
    const soma = numeros.reduce((acumulador, numero) => acumulador + numero, 0); // soma de todos os valores no array numeros com a função "reduce", começando com um valor inicial de 0
    return soma / numeros.length; // calcula a média dividindo a soma de todos os parâmetros pelo número total de parâmetros
  }

calcularMedia(2, 4, 6); // chamada da função 1, retorna 4
calcularMedia(10, 20, 30, 40, 50); // chamada da função 2, retorna 30
calcularMedia(-5, 10, -15, 20); // chamada da função 3, retorna 2.5

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 03. Crie uma função que recebe um objeto e um número indeterminado de propriedades e valores, e retorne um novo objeto contendo as propriedades e valores do objeto original e as propriedades e valores recebidos.

function adicionarPropriedades(objeto, ...novasPropriedades) { // declaração da função que receberá um número indeterminado de propriedades e valores por operador "spread"
    return {...objeto, ...Object.fromEntries(novasPropriedades)}; // retorna um novo objeto criado com "Object.fromEntries()"
  }

  const pessoa = { // declaração do array em forma de objeto
    nome: "Maria",
    idade: 25,
  };
  
  const novaPessoa = adicionarPropriedades(pessoa, ["cidade", "São Paulo"], ["profissao", "desenvolvedora"]); // as novas propriedades e valores são passados como pares [chave, valor] em vez de objetos
  
  console.log(novaPessoa); // impressão na tela: { nome: "Maria", idade: 25, cidade: "São Paulo", profissao: "desenvolvedora" }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
HOFS e FUNÇÕES
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 01. Crie uma função que receba um objeto como parâmetro e retorne um array contendo as chaves desse objeto.

function obterChaves(objeto) { // declaração da função que receberá o objeto como parâmetro
    return Object.keys(objeto); // retorna um array contendo as chaves desse objeto
  }

  const pessoa = { // array em formato de objeto declarado
    nome: "João",
    idade: 30,
    cidade: "São Paulo",
  };
  
  const chaves = obterChaves(pessoa); // retorna um array contendo as chaves do objeto passado como argumento
  
  console.log(chaves); // impressão na tela: ["nome", "idade", "cidade"]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 02. Dada uma lista de objetos que representam pessoas, crie uma nova lista com o nome de cada pessoa em maiúsculas e retorne essa lista.

const pessoas = [ // declaração de lista de objetos
    { nome: "João", idade: 30 },
    { nome: "Maria", idade: 25 },
    { nome: "Pedro", idade: 40 },
  ];
  
  const pessoasEmMaiusculas = pessoas.map(pessoa => { // o método "map()" para itera sobre a lista original e criar um novo objeto para cada pessoa com o nome em maiúsculas (".toUpperCase()")
    return {
      nome: pessoa.nome.toUpperCase(),
      idade: pessoa.idade,
    };
  });
  
  console.log(pessoasEmMaiusculas); // impressão na tela
  // [
  //   { nome: "JOÃO", idade: 30 },
  //   { nome: "MARIA", idade: 25 },
  //   { nome: "PEDRO", idade: 40 },
  // ]
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 03. Dada uma lista de objetos que representam produtos, crie uma nova lista com o preço de cada produto com desconto de 10% e retorne essa lista.

const produtos = [ // declaração de lista de objetos
    { nome: "Camisa", preco: 50 },
    { nome: "Calça", preco: 80 },
    { nome: "Tênis", preco: 120 },
  ];
  
  const produtosComDesconto = produtos.map(produto => { // o método "map()" itera sobre a lista original e cria um novo objeto para cada produto com o preço atualizado
    return {
      nome: produto.nome,
      preco: produto.preco * 0.9,
    };
  });
  
  console.log(produtosComDesconto); // impressão na tela
  // [
  //   { nome: "Camisa", preco: 45 },
  //   { nome: "Calça", preco: 72 },
  //   { nome: "Tênis", preco: 108 },
  // ]
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 04. Dada uma lista de objetos que representam pessoas, crie uma nova lista com as pessoas maiores de idade (idade >= 18) e retorne essa lista.

const pessoas = [ // declaração da lista de objetos
    { nome: "João", idade: 30 },
    { nome: "Maria", idade: 17 },
    { nome: "Pedro", idade: 40 },
  ];
  
  const pessoasMaioresDeIdade = pessoas.filter(pessoa => pessoa.idade >= 18); // o método "filter()" itera sobre a lista original e filtra apenas as pessoas cuja idade seja maior ou igual a 18
  
  console.log(pessoasMaioresDeIdade); // impressão na tela
  // [
  //   { nome: "João", idade: 30 },
  //   { nome: "Pedro", idade: 40 },
  // ]
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 05. Dada uma lista de strings, crie uma nova lista com as strings que têm mais de 5 caracteres e retorne essa lista.

const listaDeStrings = ["banana", "maçã", "laranja", "abacaxi", "uva", "manga"]; // declaração da lista de strings

const stringsComMaisDeCincoCaracteres = listaDeStrings.filter(str => str.length > 5); // o método "filter()" itera sobre a lista original e filtra apenas as strings cujo comprimento seja maior do que 5

console.log(stringsComMaisDeCincoCaracteres); // impressão na tela
// [ "banana", "laranja", "abacaxi" ]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 06. Dada uma lista de objetos que representam produtos, crie uma nova lista com os produtos que custam mais de 50 reais e retorne essa lista.

const produtos = [ // declaração da lista de objetos
    { nome: "Camisa", preco: 50 },
    { nome: "Calça", preco: 80 },
    { nome: "Tênis", preco: 120 },
  ];
  
  const produtosMaisCarosQueCinquenta = produtos.filter(produto => produto.preco > 50); // o método "filter()" itera sobre a lista original e filtra apenas os produtos cujo preço seja maior do que 50
  
  console.log(produtosMaisCarosQueCinquenta); // impressão na tela
  // [
  //   { nome: "Calça", preco: 80 },
  //   { nome: "Tênis", preco: 120 },
  // ]
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 07. Dada uma lista de objetos que representam produtos, calcule o preço total de todos eles e retorne esse valor.

const produtos = [ // declaração da lista de objetos
    { nome: "Camisa", preco: 50 },
    { nome: "Calça", preco: 80 },
    { nome: "Tênis", preco: 120 },
  ];
  
  const precoTotal = produtos.reduce((total, produto) => total + produto.preco, 0); // o método "reduce()" itera sobre a lista original e soma o preço de cada produto
  
  console.log(precoTotal); // impressão na tela: 250
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 08. Dada uma lista de objetos que representam alunos, imprima no console o nome de cada um deles.

const alunos = [ // declaração da lista de objetos
    { nome: "João", idade: 20 },
    { nome: "Maria", idade: 22 },
    { nome: "Pedro", idade: 19 },
  ];
  
  alunos.forEach(aluno => console.log(aluno.nome)); // o método "forEach()" itera sobre a lista e imprime o nome de cada aluno
  // João
  // Maria
  // Pedro
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 09. Dada uma lista de objetos que representam produtos, calcule o preço total de todos eles e imprima no console.

const produtos = [ // declaração da lista de objetos
    { nome: "Camisa", preco: 50 },
    { nome: "Calça", preco: 80 },
    { nome: "Tênis", preco: 120 },
  ];
  
  const precoTotal = produtos.reduce((total, produto) => total + produto.preco, 0); // o método "reduce()" itera sobre a lista original e soma o preço de cada produto
  
  console.log(precoTotal); // impressão na tela: 250
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 10. Dada uma lista de produtos, verifique se todos têm um preço maior que R$ 10,00.

const produtos = [ // declaração da lista de objetos
    { nome: "Camisa", preco: 50 },
    { nome: "Calça", preco: 80 },
    { nome: "Tênis", preco: 120 },
  ];
  
  const todosPrecosMaiorQue10 = produtos.every(produto => produto.preco > 10); // o método "every()" é usado para iterar sobre a lista e verificar se cada produto atende a essa condição (preço maior que R$10,00)
  
  console.log(todosPrecosMaiorQue10); // impressão na tela: true
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 11. Dada uma lista de nomes, verifique se pelo menos um deles começa com a letra "A".

const nomes = ["Ana", "Bianca", "Carlos", "Amanda"]; // declaração de lista de strings

const algumNomeComecaComA = nomes.some(nome => nome.charAt(0) === "A"); // o método "some()" itera sobre a lista e verifica se há pelo menos um nome que começa com a letra "A"

console.log(algumNomeComecaComA); // impressão na tela: true

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 12. Dado um array de objetos, encontre o objeto com o nome "João".

const pessoas = [ // declaração de array de objetos
    { nome: "Maria", idade: 25 },
    { nome: "João", idade: 30 },
    { nome: "Pedro", idade: 27 },
  ];
  
  const pessoaEncontrada = pessoas.find(pessoa => pessoa.nome === "João"); // o método "find()" é usado para encontrar o objeto com o nome "João" no array de objetos
  
  console.log(pessoaEncontrada); // impressão na tela: { nome: "João", idade: 30 }
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 13. Dado um array de objetos, encontre o objeto com a maior idade.

const pessoas = [ // declaração de array de objetos
    { nome: "Maria", idade: 25 },
    { nome: "João", idade: 30 },
    { nome: "Pedro", idade: 27 },
  ];
  
  const pessoaMaisVelha = pessoas.reduce((pessoaMaisVelha, pessoaAtual) => {
    return pessoaAtual.idade > pessoaMaisVelha.idade ? pessoaAtual : pessoaMaisVelha;
  }); // o método "reduce()" é usado para encontrar o objeto com a maior idade no array de objetos
  
  console.log(pessoaMaisVelha); // impressão na tela: { nome: "João", idade: 30 }
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
FETCH e ASYNC/AWAIT
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* 01. Faça uma requisição GET para a API do Chuck Norris e exiba no console uma piada aleatória
    i. https://api.chucknorris.io/jokes/random
*/

async function getChuckNorrisJoke() { // declaração de função para requisição GET para API usando sintaxe "async" e "await" na sequência de linhas do código
    const response = await fetch("https://api.chucknorris.io/jokes/random"); // a função "fetch()" exibe uma piada aleatória no console
    const data = await response.json();
    console.log(data.value); // impressão na tela
  }
  
  getChuckNorrisJoke(); // exibe uma piada aleatória do Chuck Norris no console
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* 02. Faça uma requisição GET para a API do GitHub e exiba no console os dados retornados.
   ii. https://api.github.com/users/**NOMEDOUSUARIO**
*/

async function getGitHubUserData(username) { // declaração de função para requisição GET para API usando sintaxe "async" e "await" na sequência de linhas do código
    const response = await fetch(`https://api.github.com/users/${username}`); // a função "fetch()" exibe os dados retornados no console
    const data = await response.json();
    console.log(data); // impressão na tela
  }
  
  getGitHubUserData("NOMEDOUSUARIO"); // substitui "NOMEDOUSUARIO" pelo nome do usuário do GitHub desejado
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
.